// AUTOGENERATED FILE: easyjson marshaller/unmarshallers.

package parser

import (
	json "encoding/json"

	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ = json.RawMessage{}
	_ = jlexer.Lexer{}
	_ = jwriter.Writer{}
)

func easyjsonF59a38b1DecodeGithubComDustinblackmanTidalwaveParser(in *jlexer.Lexer, out *ObjectResults) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "results":
			if in.IsNull() {
				in.Skip()
				out.Results = nil
			} else {
				if out.Results == nil {
					out.Results = new(map[string]int)
				}
				if in.IsNull() {
					in.Skip()
				} else {
					in.Delim('{')
					if !in.IsDelim('}') {
						*out.Results = make(map[string]int)
					} else {
						*out.Results = nil
					}
					for !in.IsDelim('}') {
						key := string(in.String())
						in.WantColon()
						var v1 int
						v1 = int(in.Int())
						(*out.Results)[key] = v1
						in.WantComma()
					}
					in.Delim('}')
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjsonF59a38b1EncodeGithubComDustinblackmanTidalwaveParser(out *jwriter.Writer, in ObjectResults) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"type\":")
	out.String(string(in.Type))
	if !first {
		out.RawByte(',')
	}
	out.RawString("\"results\":")
	if in.Results == nil {
		out.RawString("null")
	} else {
		if *in.Results == nil {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v2First := true
			for v2Name, v2Value := range *in.Results {
				if !v2First {
					out.RawByte(',')
				}
				v2First = false
				out.String(string(v2Name))
				out.RawByte(':')
				out.Int(int(v2Value))
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ObjectResults) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF59a38b1EncodeGithubComDustinblackmanTidalwaveParser(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ObjectResults) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF59a38b1EncodeGithubComDustinblackmanTidalwaveParser(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ObjectResults) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF59a38b1DecodeGithubComDustinblackmanTidalwaveParser(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ObjectResults) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF59a38b1DecodeGithubComDustinblackmanTidalwaveParser(l, v)
}
func easyjsonF59a38b1DecodeGithubComDustinblackmanTidalwaveParser1(in *jlexer.Lexer, out *IntResults) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "results":
			out.Results = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjsonF59a38b1EncodeGithubComDustinblackmanTidalwaveParser1(out *jwriter.Writer, in IntResults) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"type\":")
	out.String(string(in.Type))
	if !first {
		out.RawByte(',')
	}
	out.RawString("\"results\":")
	out.Int(int(in.Results))
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v IntResults) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF59a38b1EncodeGithubComDustinblackmanTidalwaveParser1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v IntResults) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF59a38b1EncodeGithubComDustinblackmanTidalwaveParser1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *IntResults) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF59a38b1DecodeGithubComDustinblackmanTidalwaveParser1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *IntResults) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF59a38b1DecodeGithubComDustinblackmanTidalwaveParser1(l, v)
}
func easyjsonF59a38b1DecodeGithubComDustinblackmanTidalwaveParser2(in *jlexer.Lexer, out *ArrayResults) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "results":
			if in.IsNull() {
				in.Skip()
				out.Results = nil
			} else {
				if out.Results == nil {
					out.Results = new([]string)
				}
				if in.IsNull() {
					in.Skip()
					*out.Results = nil
				} else {
					in.Delim('[')
					if !in.IsDelim(']') {
						*out.Results = make([]string, 0, 4)
					} else {
						*out.Results = []string{}
					}
					for !in.IsDelim(']') {
						var v3 string
						v3 = string(in.String())
						*out.Results = append(*out.Results, v3)
						in.WantComma()
					}
					in.Delim(']')
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjsonF59a38b1EncodeGithubComDustinblackmanTidalwaveParser2(out *jwriter.Writer, in ArrayResults) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"type\":")
	out.String(string(in.Type))
	if !first {
		out.RawByte(',')
	}

	out.RawString("\"results\":")
	if in.Results == nil {
		out.RawString("null")
	} else {
		if *in.Results == nil {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v4, v5 := range *in.Results {
				if v4 > 0 {
					out.RawByte(',')
				}
				out.String(string(v5))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ArrayResults) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF59a38b1EncodeGithubComDustinblackmanTidalwaveParser2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ArrayResults) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF59a38b1EncodeGithubComDustinblackmanTidalwaveParser2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ArrayResults) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF59a38b1DecodeGithubComDustinblackmanTidalwaveParser2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ArrayResults) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF59a38b1DecodeGithubComDustinblackmanTidalwaveParser2(l, v)
}
